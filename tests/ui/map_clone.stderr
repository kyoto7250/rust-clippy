error: you are using an explicit closure for copying elements
  --> $DIR/map_clone.rs:13:22
   |
LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`
   |
   = note: `-D clippy::map-clone` implied by `-D warnings`

error: you are using an explicit closure for cloning elements
  --> $DIR/map_clone.rs:14:26
   |
LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`

error: you are using an explicit closure for copying elements
  --> $DIR/map_clone.rs:15:23
   |
LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`

error: you are using an explicit closure for copying elements
  --> $DIR/map_clone.rs:17:26
   |
LL |     let _: Option<u64> = Some(&16).map(|b| *b);
   |                          ^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&16).copied()`

error: you are using an explicit closure for copying elements
  --> $DIR/map_clone.rs:18:25
   |
LL |     let _: Option<u8> = Some(&1).map(|x| x.clone());
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&1).copied()`

error: you are needlessly cloning iterator elements
  --> $DIR/map_clone.rs:29:29
   |
LL |     let _ = std::env::args().map(|v| v.clone());
   |                             ^^^^^^^^^^^^^^^^^^^ help: remove the `map` call

error: you are using an explicit closure for copying elements
  --> $DIR/map_clone.rs:70:22
   |
LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`

error: you are using an explicit closure for copying elements
  --> $DIR/map_clone.rs:75:22
   |
LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`

error: aborting due to 8 previous errors

